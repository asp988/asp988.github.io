"use strict";

var ticketsApp = {};

ticketsApp.TicketModel = Backbone.Model.extend({
    defaults: {
        number: "0000",
        subject: "Undef",
        sn: "Undef",
        clientname: "Undef",
        phone: "0000000",
        complect: "Undef",
        status: "Undef",
        comment: "Undef",
        operation: "Undef",
        cost: "0",
        getDate: "00.00.0000",
        doneDate: "00.00.0000"
    }
});

ticketsApp.TicketCollect = Backbone.Collection.extend({
    model: ticketsApp.TicketModel,
    url: "https://dry-bastion-22417.herokuapp.com/"
});

ticketsApp.tickets = new ticketsApp.TicketCollect();

ticketsApp.TicketView = Backbone.View.extend({
    tagName: "ul",
    className: "ticketapp-main-record",
    template: _.template($("#ticket-view-template").html()),
    events: {
        dblclick: "editTicketView",
        touchstart: "editTicketView",
        "click .ticketapp-main-record-remove": "removeTicket"
    },
    initialize: function() {
        this.listenTo(this.model, "change", this.render);
        this.listenTo(this.model, "destroy", this.remove);
        this.listenTo(this.model, "match", this.filterMatch);
        this.listenTo(this.model, "unmatch", this.filterUnmatch);
    },
    render: function() {
        this.$el.html(this.template(this.model.toJSON()));
        return this;
    },
    editTicketView: function(event) {
        var view, isFirstEditView = !$(".ticketapp-main-ticketedit-form-subjectinput")[0];
        if (event.type === "dblclick" && isFirstEditView) {
            view = new ticketsApp.EditTicketView({
                model: this.model
            });
            $("#ticketapp-main").append(view.render().el);
        } else if (event.type === "touchstart") {
            if (ticketsApp.prevTouchTime == undefined || event.timeStamp > ticketsApp.prevTouchTime + 1e3) {
                ticketsApp.prevTouchTime = event.timeStamp;
                ticketsApp.prevTouchTarget = event.currentTarget;
            }
            if (event.timeStamp >= ticketsApp.prevTouchTime + 50 && event.timeStamp < ticketsApp.prevTouchTime + 800 && ticketsApp.prevTouchTarget === event.currentTarget && isFirstEditView) {
                view = new ticketsApp.EditTicketView({
                    model: this.model
                });
                $("#ticketapp-main").append(view.render().el);
            }
        }
    },
    removeTicket: function(event) {
        this.model.destroy();
    },
    filterMatch: function() {
        this.$el.addClass("filtered");
    },
    filterUnmatch: function() {
        this.$el.removeClass("filtered");
    }
});

ticketsApp.CreateTicketView = Backbone.View.extend({
    tagName: "section",
    className: "ticketapp-main-ticketedit",
    template: _.template($("#ticket-edit-template").html()),
    events: {
        "click .ticketapp-main-ticketedit-form-controls-save": "createTicket",
        "click .ticketapp-main-ticketedit-form-controls-cancel": "cancelTicket",
        "click #ticketapp-main-ticketedit-form-controls-printticket": "printTicket"
    },
    initialize: function() {
        var currentDate = new Date();
        this.date = "" + currentDate.getDate() + "." + currentDate.getMonth() + "." + currentDate.getUTCFullYear();
    },
    render: function() {
        var that = this;
        this.$el.html(this.template({
            number: ticketsApp.tickets.length ? +ticketsApp.tickets.last().get("number") + 1 : "1",
            subject: "",
            sn: "",
            clientname: "",
            phone: "",
            complect: "",
            status: "",
            comment: "",
            operation: "",
            cost: "",
            getDate: this.date,
            doneDate: ""
        }));
        setTimeout(function() {
            that.el.scrollIntoView(true);
        }, 10);
        return this;
    },
    createTicket: function() {
        var ticket = {
            number: this.$("#ticketapp-main-ticketedit-form-numberinput").val(),
            subject: this.$("#ticketapp-main-ticketedit-form-subjectinput").val() || "Наименование",
            sn: this.$("#ticketapp-main-ticketedit-form-sninput").val() || "000000000000",
            clientname: this.$("#ticketapp-main-ticketedit-form-clientnameinput").val() || "Частное лицо",
            phone: this.$("#ticketapp-main-ticketedit-form-phoneinput").val() || "0000000000",
            complect: this.$("#ticketapp-main-ticketedit-form-complectinput").val() || "Комплектация",
            status: this.$("#ticketapp-main-ticketedit-form-statusinput option:selected").val(),
            comment: this.$("#ticketapp-main-ticketedit-form-commentinput").val() || "",
            operation: this.$("#ticketapp-main-ticketedit-form-operationsinput").val() || "",
            cost: this.$("#ticketapp-main-ticketedit-form-costinput").val() || "0",
            getDate: this.$("#ticketapp-main-ticketedit-form-dates-getdate").val(),
            doneDate: this.$("#ticketapp-main-ticketedit-form-dates-donedate").val()
        };
        ticketsApp.tickets.create(ticket, {
            wait: true
        });
        this.remove();
    },
    cancelTicket: function() {
        this.remove();
    },
    printTicket: function() {
        var message = {
            number: this.$("#ticketapp-main-ticketedit-form-numberinput").val(),
            subject: this.$("#ticketapp-main-ticketedit-form-subjectinput").val() || "_______________",
            sn: this.$("#ticketapp-main-ticketedit-form-sninput").val() || "_______________",
            clientname: this.$("#ticketapp-main-ticketedit-form-clientnameinput").val() || "_______________",
            phone: this.$("#ticketapp-main-ticketedit-form-phoneinput").val() || "_______________",
            complect: this.$("#ticketapp-main-ticketedit-form-complectinput").val() || "_______________",
            status: this.$("#ticketapp-main-ticketedit-form-statusinput option:selected").val(),
            comment: this.$("#ticketapp-main-ticketedit-form-commentinput").val() || "",
            operation: this.$("#ticketapp-main-ticketedit-form-operationsinput").val() || "",
            cost: this.$("#ticketapp-main-ticketedit-form-costinput").val() || "_______________",
            getDate: this.$("#ticketapp-main-ticketedit-form-dates-getdate").val(),
            doneDate: this.$("#ticketapp-main-ticketedit-form-dates-donedate").val()
        };
        window.printPopup = window.open("ticketprintpopup.html", "print", "menubar=yes");
        $(printPopup).on("load", function(event) {
            printPopup.postMessage(message, "*");
        });
    }
});

ticketsApp.EditTicketView = Backbone.View.extend({
    tagName: "section",
    className: "ticketapp-main-ticketedit",
    template: _.template($("#ticket-edit-template").html()),
    events: {
        "click #ticketapp-main-ticketedit-form-controls-save": "saveTicket",
        "click #ticketapp-main-ticketedit-form-controls-cancel": "cancelTicket",
        "click #ticketapp-main-ticketedit-form-controls-printticket": "printTicket",
        "click #ticketapp-main-ticketedit-form-controls-printact": "printAct"
    },
    initialize: function() {
        var currentDate = new Date();
        this.date = "" + currentDate.getDate() + "." + currentDate.getMonth() + "." + currentDate.getUTCFullYear();
        this.previosState = this.model.get("status");
    },
    render: function() {
        var that = this;
        this.$el.html(this.template(this.model.toJSON()));
        setTimeout(function() {
            that.el.scrollIntoView(true);
        }, 5);
        setTimeout(function() {
            that.$("#ticketapp-main-ticketedit-form-subjectinput").focus();
        }, 150);
        return this;
    },
    saveTicket: function() {
        var ticket = {
            number: this.$("#ticketapp-main-ticketedit-form-numberinput").val(),
            subject: this.$("#ticketapp-main-ticketedit-form-subjectinput").val(),
            sn: this.$("#ticketapp-main-ticketedit-form-sninput").val(),
            clientname: this.$("#ticketapp-main-ticketedit-form-clientnameinput").val(),
            phone: this.$("#ticketapp-main-ticketedit-form-phoneinput").val(),
            complect: this.$("#ticketapp-main-ticketedit-form-complectinput").val(),
            status: this.$("#ticketapp-main-ticketedit-form-statusinput option:selected").val(),
            comment: this.$("#ticketapp-main-ticketedit-form-commentinput").val(),
            operation: this.$("#ticketapp-main-ticketedit-form-operationsinput").val(),
            cost: this.$("#ticketapp-main-ticketedit-form-costinput").val(),
            getDate: this.$("#ticketapp-main-ticketedit-form-dates-getdate").val(),
            doneDate: this.$("#ticketapp-main-ticketedit-form-dates-donedate").val()
        };
        ticket.doneDate = ticket.status === "Выдан" && this.model.get("status") !== "Выдан" ? this.date : ticket.doneDate;
        this.model.save(ticket);
        if (this.previosState !== "Выдан" && this.model.get("status") === "Выдан") {
            this.printAct();
        }
        this.remove();
    },
    cancelTicket: function() {
        this.remove();
    },
    printTicket: function() {
        var message = this.model.toJSON();
        window.printPopup = window.open("ticketprintpopup.html", "print", "menubar=yes");
        $(printPopup).on("load", function(event) {
            printPopup.postMessage(message, "*");
        });
    },
    printAct: function() {
        var message = this.model.toJSON();
        if (this.model.get("status") === "Выдан") {
            window.printPopup = window.open("actprintpopup.html", "print", "menubar=yes");
            $(printPopup).on("load", function(event) {
                printPopup.postMessage(message, "*");
            });
        }
    }
});

ticketsApp.AppView = Backbone.View.extend({
    el: ".ticketapp",
    events: {
        "click .ticketapp-header-newticket": "createTicketView",
        "keyup #ticketapp-header-searchinput": "filterTickets",
        "blur #ticketapp-header-searchinput": "clearFilter",
        "click .ticketapp-header-save": "saveTickets",
        "change .ticketapp-header-loadinput": "loadTickets"
    },
    initialize: function() {
        this.$ticketsList = this.$("#ticketapp-main");
        this.listenTo(ticketsApp.tickets, "add", this.addTicketView);
        ticketsApp.tickets.fetch();
    },
    render: function() {
        console.log();
    },
    addTicketView: function(ticket) {
        var view = new ticketsApp.TicketView({
            model: ticket
        });
        this.$ticketsList.append(view.render().el);
    },
    createTicketView: function(event) {
        var isFirstEditView = !$(".ticketapp-main-ticketedit-form-subjectinput")[0];
        if (isFirstEditView) {
            var view = new ticketsApp.CreateTicketView();
            this.$ticketsList.append(view.render().el);
        }
    },
    filterTickets: function(event) {
        var searchString = $("#ticketapp-header-searchinput").val(), filteredTickets = ticketsApp.tickets.filter(function(model) {
            return new RegExp(searchString, "i").test(model.get("number")) || new RegExp(searchString, "i").test(model.get("phone")) || new RegExp(searchString, "i").test(model.get("clientname"));
        });
        this.$el.addClass("filter");
        ticketsApp.tickets.forEach(function(model) {
            model.trigger("unmatch");
        });
        _.forEach(filteredTickets, function(model) {
            model.trigger("match");
        });
    },
    clearFilter: function() {
        if ($("#ticketapp-header-searchinput").val() === "") {
            this.$el.removeClass("filter");
            ticketsApp.tickets.forEach(function(model) {
                model.trigger("unmatch");
            });
        }
    },
    saveTickets: function(event) {
        var currentDate = new Date(), blob = new Blob([ JSON.stringify(ticketsApp.tickets.toJSON()) ], {
            type: "text/plain;charset=utf-8"
        }), filename = "tickets-" + currentDate.getDate() + "-" + currentDate.getMonth() + "-" + currentDate.getUTCFullYear() + ".json";
        saveAs(blob, filename);
    },
    loadTickets: function(event) {
        var reader = new FileReader();
        reader.readAsText(event.target.files[0]);
        reader.onload = function() {
            var data = JSON.parse(reader.result);
            if (data[0].number && data[0].subject) {
                for (var i = ticketsApp.tickets.length - 1; i >= 0; i--) {
                    ticketsApp.tickets.models[i].destroy();
                }
                _.each(data, function(m) {
                    ticketsApp.tickets.create(m);
                });
            }
        };
    }
});

ticketsApp.app = new ticketsApp.AppView();